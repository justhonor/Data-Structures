#!/usr/bin/python
# coding:utf-8
##
# Filename: minNumberInRotateArray.py
# Author  : aiapple
# Date    : 2017-08-5
# Describe: 剑指offter NO.8
#           
#      把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 
#  输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如
#  数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 
#  NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
##
#############################################

array = [6873,6874,6875,6875,6875,6875,6878,6880,6881,6882,6884,6885,6885,6887,6889,6891,6892,6893,6893,6894,6895,6897,6897,6900,6900,6900,6901,6905,6905,6906,6906,6907,6908,6908,6912,6912,6914,6916,6917,6919,6920,6921,6922,6922,6926,6932,6936,6940,6941,6942,6943,6943,6944,6946,6947,6951,6951,6955,6956,6957,6957,6959,6959,6961,6964,6972,6974,6975,6978,6978,6978,6980,6980,6981,6981,6982,6983,6983,6983,6984,6984,6984,6987,6988,6988,6988,6991,6992,6994,6996,6998,6998,6998,6999,6999,7000,7006,7007,7008,7008,7009,7011,7011,7011,7014,7014,7015,7016,7016,7017,7018,7019,7023,7024,7026,7027,7027,7029,7029,7029,7031,7032,7033,7038,7038,7042,7042,7044,7046,7046,7046,7046,7048,7048,7049,7051,7051,7056,7056,7056,7057,7060,7060,7060,7061,7062,7062,7065,7065,7065,7066,7066,7067,7067,7067,7068,7069,7069,7070,7071,7075,7076,7078,7079,7079,7081,7081,7085,7089,7089,7089,7089,7090,7091,7093,7094,7095,7097,7100,7101,7101,7102,7103,7104,7106,7109,7111,7115,7123,7123,7126,7126,7130,7130,7132,7132,7139,7139,7140,7140,7141,7144,7145,7146,7146,7146,7147,7150,7150,7151,7151,7152,7153,7154,7156,7156,7157,7157,7159,7159,7159,7163,7164,7164,7166,7166,7166,7166,7167,7167,7168,7170,7171,7171,7172,7172,7173,7173,7175,7176,7179,7180,7180,7181,7184,7185,7186,7192,7192,7192,7193,7195,7195,7195,7198,7198,7199,7203,7208,7210,7211,7212,7212,7213,7213,7214,7215,7215,7216,7216,7217,7217,7218,7218,7221,7223,7224,7225,7228,7231,7232,7235,7236,7239,7239,7239,7240,7240,7242,7242,7242,7243,7243,7243,7244,7244,7244,7244,7245,7247,7248,7248,7248,7251,7251,7251,7255,7256,7256,7257,7258,7263,7263,7265,7266,7271,7274,7274,7274,7277,7277,7280,7280,7280,7283,7283,7284,7284,7287,7287,7288,7288,7290,7290,7291,7291,7292,7300,7301,7302,7304,7304,7305,7311,7312,7312,7315,7317,7317,7317,7318,7320,7320,7320,7322,7323,7323,7324,7328,7329,7329,7329,7332,7332,7334,7335,7339,7339,7340,7340,7341,7342,7342,7343,7346,7349,7351,7352,7353,7354,7356,7358,7364,7367,7367,7368,7370,7372,7373,7373,7374,7375,7375,7375,7378,7378,7379,7379,7380,7380,7381,7382,7382,7383,7384,7385,7385,7389,7390,7395,7396,7397,7397,7398,7399,7399,7399,7400,7402,7402,7404,7404,7405,7406,7409,7412,7413,7415,7416,7417,7417,7419,7420,7420,7421,7422,7422,7423,7425,7425,7431,7433,7433,7433,7434,7434,7434,7438,7438,7440,7440,7441,7441,7442,7445,7450,7453,7453,7455,7456,7458,7459,7460,7460,7461,7461,7465,7465,7469,7469,7470,7471,7472,7472,7476,7481,7481,7482,7484,7486,7487,7488,7488,7492,7492,7493,7495,7496,7497,7497,7497,7499,7501,7503,7504,7506,7507,7508,7509,7509,7510,7510,7510,7512,7513,7514,7514,7517,7517,7517,7517,7518,7519,7521,7521,7522,7523,7524,7526,7531,7531,7531,7533,7538,7544,7546,7548,7548,7548,7548,7549,7550,7550,7553,7555,7557,7557,7558,7564,7564,7567,7568,7574,7576,7577,7577,7580,7580,7584,7585,7586,7587,7588,7590,7592,7592,7595,7596,7597,7599,7603,7603,7604,7610,7611,7613,7614,7615,7617,7619,7620,7621,7621,7622,7624,7624,7629,7634,7634,7634,7635,7636,7637,7639,7641,7641,7644,7645,7647,7649,7651,7660,7660,7660,7660,7661,7663,7665,7669,7670,7673,7674,7675,7683,7683,7683,7686,7689,7691,7693,7694,7698,7699,7699,7700,7700,7701,7702,7707,7708,7713,7714,7715,7715,7717,7717,7718,7718,7721,7723,7723,7724,7724,7726,7726,7727,7727,7728,7729,7729,7730,7734,7735,7735,7736,7736,7739,7740,7741,7750,7751,7752,7755,7757,7759,7760,7760,7761,7762,7762,7763,7764,7766,7767,7767,7768,7772,7773,7773,7774,7776,7777,7779,7779,7780,7781,7782,7782,7784,7784,7784,7785,7785,7785,7786,7787,7788,7790,7790,7792,7795,7800,7801,7801,7801,7801,7804,7805,7809,7809,7811,7813,7815,7817,7822,7822,7822,7823,7824,7824,7825,7825,7826,7827,7827,7827,7828,7828,7829,7830,7832,7833,7835,7835,7836,7838,7839,7839,7841,7842,7842,7843,7843,7843,7844,7845,7846,7848,7849,7851,7852,7853,7853,7855,7856,7856,7857,7861,7862,7863,7865,7866,7867,7867,7867,7869,7870,7871,7878,7879,7880,7880,7881,7881,7881,7885,7886,7886,7888,7889,7889,7889,7890,7891,7891,7892,7893,7895,7898,7898,7899,7900,7900,7900,7900,7900,7900,7901,7901,7902,7903,7903,7905,7905,7905,7905,7906,7906,7907,7908,7909,7909,7910,7912,7912,7913,7913,7913,7914,7918,7918,7924,7926,7926,7926,7926,7927,7929,7929,7930,7932,7933,7934,7935,7936,7938,7938,7939,7940,7941,7941,7942,7943,7943,7944,7944,7944,7946,7950,7950,7953,7954,7955,7956,7956,7956,7957,7958,7958,7959,7960,7961,7961,7962,7963,7966,7969,7971,7971,7972,7973,7977,7977,7979,7979,7980,7981,7982,7983,7983,7983,7984,7984,7985,7985,7986,7987,7988,7988,7988,7989,7990,7991,7994,7996,7996,7997,8002,8002,8003,8003,8004,8005,8005,8007,8009,8009,8012,8013,8017,8021,8022,8023,8024,8025,8025,8026,8027,8028,8030,8033,8033,8034,8036,8036,8038,8038,8039,8039,8041,8045,8045,8046,8046,8048,8048,8053,8055,8056,8060,8065,8065,8065,8066,8070,8071,8071,8072,8072,8073,8074,8076,8076,8077,8080,8083,8084,8084,8085,8085,8086,8087,8088,8091,8092,8094,8094,8095,8097,8098,8098,8099,8103,8104,8104,8105,8107,8107,8108,8108,8109,8110,8110,8111,8111,8112,8112,8113,8113,8114,8117,8118,8118,8123,8123,8125,8126,8127,8128,8129,8131,8131,8134,8134,8138,8139,8139,8140,8140,8141,8141,8143,8145,8148,8149,8150,8150,8152,8153,8153,8154,8155,8155,8155,8156,8156,8157,8157,8158,8159,8160,8163,8165,8166,8167,8167,8171,8172,8173,8173,8174,8175,8175,8180,8180,8181,8181,8183,8185,8186,8186,8187,8187,8188,8188,8188,8188,8191,8194,8196,8200,8201,8201,8204,8204,8205,8207,8208,8208,8208,8211,8212,8212,8213,8213,8215,8216,8217,8218,8218,8219,8219,8219,8220,8221,8222,8229,8238,8239,8240,8241,8243,8243,8248,8249,8249,8250,8251,8253,8255,8256,8258,8258,8259,8260,8260,8261,8261,8264,8265,8266,8268,8268,8271,8272,8274,8275,8275,8277,8277,8278,8279,8279,8281,8282,8283,8286,8286,8287,8287,8291,8294,8296,8298,8301,8301,8302,8304,8304,8305,8305,8305,8305,8305,8305,8308,8309,8310,8311,8311,8312,8313,8315,8316,8319,8319,8320,8321,8321,8322,8323,8324,8324,8327,8328,8328,8328,8329,8330,8331,8335,8337,8339,8340,8343,8345,8347,8349,8350,8350,8351,8355,8355,8356,8356,8359,8361,8361,8362,8362,8366,8367,8369,8371,8371,8374,8375,8376,8377,8382,8384,8391,8391,8391,8394,8395,8396,8396,8397,8398,8401,8401,8402,8402,8404,8406,8406,8407,8410,8411,8412,8414,8414,8415,8415,8418,8419,8421,8425,8427,8428,8429,8434,8435,8436,8436,8436,8439,8440,8440,8443,8443,8444,8445,8446,8446,8447,8447,8447,8448,8453,8454,8456,8456,8456,8457,8458,8458,8460,8462,8462,8463,8464,8464,8467,8467,8470,8471,8471,8472,8473,8474,8475,8475,8480,8481,8481,8482,8483,8483,8484,8484,8484,8485,8487,8488,8488,8489,8490,8492,8495,8496,8500,8502,8502,8502,8503,8503,8505,8505,8506,8508,8509,8513,8513,8515,8516,8517,8519,8520,8521,8521,8521,8522,8524,8525,8527,8533,8534,8535,8537,8537,8538,8538,8539,8541,8543,8543,8543,8544,8545,8545,8545,8547,8549,8550,8550,8552,8553,8558,8558,8559,8559,8571,8571,8571,8572,8573,8575,8575,8576,8576,8577,8579,8579,8581,8583,8584,8584,8585,8587,8587,8588,8588,8590,8590,8595,8596,8598,8598,8600,8601,8602,8604,8604,8604,8607,8607,8607,8608,8609,8610,8610,8611,8611,8612,8612,8613,8614,8615,8616,8616,8619,8620,8624,8624,8625,8625,8626,8626,8630,8630,8630,8634,8638,8638,8639,8640,8641,8642,8644,8645,8646,8647,8647,8647,8653,8656,8656,8658,8658,8659,8659,8660,8660,8661,8662,8662,8663,8664,8666,8667,8668,8668,8668,8669,8669,8670,8672,8675,8675,8676,8676,86]
a = [3,4,5,1,2]
# def minNumberInRotateArray(rotateArray):
#     # write code here
#     if len(rotateArray)==0:
#         return 0
#     left = 0
#     right = len(rotateArray) - 1
#     mid = left
#     while rotateArray[left] > rotateArray[right]:
#         if right - left == 1:
#             mid = right
#             break
#         mid = (left+right)/2
#         if rotateArray[mid] >= rotateArray[left]:
#             left = mid 
#         elif rotateArray[mid] <= rotateArray[right]:
#             right = mid
            
#     return rotateArray[mid]

def minNumberInRotateArray(rotateArray):
    # write code here
    if len(rotateArray)==0:
        return 0
    left = 0
    right = len(rotateArray) - 1
    mid = -1
    while rotateArray[left] >= rotateArray[right]:
        # if right - left == 1:
        #     mid = right
        #     break
        print "sdf"
        mid = left + (right-left) / 2 ;
        if rotateArray[mid] >= rotateArray[left]:
            left = mid 
        elif rotateArray[mid] <= rotateArray[right]:
            right = mid

    return rotateArray[mid]

print minNumberInRotateArray(a)

